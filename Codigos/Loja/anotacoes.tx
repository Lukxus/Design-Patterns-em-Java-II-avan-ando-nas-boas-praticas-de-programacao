Decorator: Decorator is a structural design pattern that
lets you attach new behaviors to objects by placing these
objects inside special wrapper objects that contain the behaviors.

Adapter: Adapter is a structural design pattern that allows objects
with incompatible interfaces to collaborate.

Composite: Composite is a structural design pattern that lets you
compose objects into tree structures and then work with these
structures as if they were individual objects.

Facade: Facade is a structural design pattern that provides a
simplified interface to a library, a framework, or any other
complex set of classes.

Proxy: Proxy is a structural design pattern that lets you provide
a substitute or placeholder for another object. A proxy controls
access to the original object, allowing you to perform something
either before or after the request gets through to the original object.




